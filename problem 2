Problem 2 From <https://projecteuler.net/problem=2> 
Problem name: Even Fibonacci numbers

Problem Description: Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

solved using js on 1/17/17

//start code
var sumFibs = function(num) {
  var total = 0; //start at neg 1 to counter the double 1's at start of fib sequence
  var fib = 0; // fib numbers
  var currentNum = 1; //starting fib number
  var lastNum = 1; //the lastNum; will be added to current number
  
  //num is value limit
  //lets start with a while loop to establish range
  while (currentNum < num) {
    fib += currentNum; //adds the current fib number to our counter
    lastNum = currentNum; // increaments last number to currentNum
    currentNum = fib - lastNum; // increaments currentNum
    if(fib % 2 === 0) {// adds fib number to our counter if even
      total += fib;
    }
     
   // console.log(fib); // test starting number
  }
  
  return total;
};

sumFibs(4e6); // 4613732
//end code

I used a simple brute force approach to this problem that looped through each fibonacci number from 1 to the stated limit of 4e6 (4,000,000)
and checked each increasing number if it was even. If found to be even, I added it to the total and then returned the total after the loop 
was finished.
